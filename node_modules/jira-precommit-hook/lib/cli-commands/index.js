'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.execute = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _map;

var execute = exports.execute = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(_ref2) {
    var command = _ref2.command;
    var options = (0, _objectWithoutProperties3.default)(_ref2, ['command']);
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', map[command].execute(options));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function execute(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.register = register;

var _jokes = require('./jokes');

var _jokes2 = _interopRequireDefault(_jokes);

var _configcheck = require('./configcheck');

var _configcheck2 = _interopRequireDefault(_configcheck);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var map = (_map = {}, (0, _defineProperty3.default)(_map, _jokes2.default.command, _jokes2.default), (0, _defineProperty3.default)(_map, _configcheck2.default.command, _configcheck2.default), _map);

function register(parser) {
  var subparsers = parser.addSubparsers({
    title: 'commands',
    dest: 'command'
  });

  (0, _keys2.default)(map).forEach(function (command) {
    return map[command].register(subparsers);
  });
}